%Note that includes are defined relative to the prove_properties.sh script
include('axioms/lists.ax').
%-- Axioms defining a key-value store
%-- The key-value store is represented as an array.
%-- The key-value store is of length n, with a hash function of (k modulo n)
%-- In case of hash collisions, we use lists for separate chaining
%-- Keys are nonnegative integers
%-- Values are integers
 
%-- Length of the key-value store
tff(length,type,
    n: $int ).

%-- Key-Value store must be non-empty
tff(length_pos,axiom,
    $greater(n,0) ).

%-- Hash function

tff(hash,type,
   h: ($int) > $int).

tff(hash_def,axiom,
    ! [I: $int] : (h(I) = $remainder_e(I,n))).

%-- Heavy inspiration from examples/array.smt2 from https://bitbucket.org/peba123/smttotptp/src/master/
%-- Axioms are heavily inspired from "The Vampire and the FOOL" 2016

%-- Key-Value Store function declarations
%-- This will either return a nil, or cons(pair_cons(K,V),nil)
tff(get,type,
    get: ( $array($int,list) * $int ) > list ).

%-- Does not allow for duplicate keys, these will be replaced
%-- Second argument is the key, third is the value
tff(put,type,
    put: ( $array($int,list) * $int * $int ) > $array($int,list) ).

%-- Removal at a specified index
tff(remove,type,
    remove: ( $array($int,list) * $int ) > $array($int,list) ).

tff(contains,type,
    contains: ( $array($int,list) * $int ) > $o ).

tff(size,type,
    size: $array($int,list) > $int ).

%-- Helper functions
%-- This will return an entire chain in the key-value store
tff(get_chain,type,
    get_chain: ( $array($int,list) * $int ) > list ).

%-- This gives the size of the key-value store up to a certain index
tff(size_up_to_index,type,
    size_up_to_index: ( $array($int,list) * $int ) > $int ).

%-- Function definitions
%-- These do not suffice to be able to prove most properties of key-value stores. 
tff(get_chain_def,axiom,
    ! [A: $array($int,list),K: $int] :  ($greatereq(K,0) => get_chain(A,K) = $select(A,h(K))  )).

tff(get_def,axiom,
    ! [A: $array($int,list),K: $int] : ( ($greatereq(K,0)) => get(A,K) = get_l(get_chain(A,K),K) ) ).

tff(remove_def,axiom,
    ! [A: $array($int,list),K: $int] : ( ($greatereq(K,0)) => remove(A,K) = $store(A,h(K),remove_l(get_chain(A,K),K)) ) ).

tff(put_def,axiom,
    ! [A: $array($int,list),K: $int,V: $int] : ( ($greatereq(K,0)) => put(A,K,V) = $store(A,h(K),append(cons(pair_cons(K,V),nil),get_chain(remove(A,K),K))) ) ).

tff(contains_def,axiom,
    ! [A: $array($int,list),V: $int] :
      ( contains(A,V)
    <=> ? [K: $int] : ( get(A,K) = cons(pair_cons(K,V),nil) ) ) ).

tff(size_up_to_index_zero,axiom,
    ! [A: $array($int,list)] : ( size_up_to_index(A,0) = length_l(get_chain(A,0)) ) ).

tff(size_up_to_index_nonzero,axiom,
    ! [A: $array($int,list),I: $int] :
      ( ( $greater(I,0)
        & $less(I,n) )
     => ( size_up_to_index(A,I) = $sum(length_l(get_chain(A,I)),size_up_to_index(A,$difference(I,1))) ) ) ).

tff(size_def,axiom,
    ! [A: $array($int,list)] : ( size(A) = size_up_to_index(A,$difference(n,1)) ) ).

%-- Axioms
tff(read_over_write_one,axiom,
    ! [A: $array($int,list),K: $int,V: $int] : ( get(put(A,K,V),K) = cons(pair_cons(K,V),nil) ) ).

tff(read_over_write_two,axiom,
    ! [A: $array($int,list),K: $int,L: $int,V: $int] :
      ( ( K != L )
     => ( get(put(A,K,V),L) = get(A,L) ) ) ).

tff(extensionality,axiom,
    ! [A: $array($int,list),B: $array($int,list)] :
      ( ! [K: $int] : ( get(A,K) = get(B,K) )
     => ( A = B ) ) ).

%--I swear this could have been proven before but now it seemingly can't be?
%--tff(chain_two,conjecture,
%--! [A: $array($int,list),K: $int,X: $int] : ( $greatereq(K,0) => (get_chain(A,$sum(K,$product(X,n))) = get_chain(A,K) ) )).
